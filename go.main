package main

import (
	"encoding/xml"
	"fmt"
	"os"
	"strings"

	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/bubbles/list"
	"github.com/charmbracelet/bubbles/textinput"
	"github.com/charmbracelet/lipgloss"
)

type Manifest struct {
	XMLName  xml.Name  `xml:"manifest"`
	Default  Default   `xml:"default"`
	Remotes  []Remote  `xml:"remote"`
	Projects []Project `xml:"project"`
}

type Default struct {
	SyncJ    string `xml:"sync-j,attr"`
	Revision string `xml:"revision,attr"`
}

type Remote struct {
	Fetch    string `xml:"fetch,attr"`
	Name     string `xml:"name,attr"`
	Revision string `xml:"revision,attr"`
	Upstream string `xml:"upstream,attr"`
	Review   string `xml:"review,attr"`
}

type Project struct {
	Path     string `xml:"path,attr"`
	Name     string `xml:"name,attr"`
	Remote   string `xml:"remote,attr"`
	Revision string `xml:"revision,attr"`
	Upstream string `xml:"upstream,attr"`
	Groups   string `xml:"groups,attr"`
}

type EntryType int

const (
	EntryDefault EntryType = iota
	EntryRemote
	EntryProject
)

type entry struct {
	typeOf EntryType
	title  string
	desc   string
	index  int
}

func (e entry) Title() string       { return e.title }
func (e entry) Description() string { return e.desc }
func (e entry) FilterValue() string { return e.title }

type model struct {
	manifest   Manifest
	list       list.Model
	editing    bool
	editingKey string
	inputs     []textinput.Model
	labels     []string
	cursor     int
	editIndex  int
	editType   EntryType
	saving     bool
	errorMsg   string
}

var docStyle = lipgloss.NewStyle().Margin(1, 2)

func newModel(manifest Manifest) model {
	m := model{manifest: manifest}
	m.refreshList()
	return m
}

func (m *model) refreshList() {
	items := []list.Item{
		entry{EntryDefault, "default", fmt.Sprintf("sync-j: %s, revision: %s", m.manifest.Default.SyncJ, m.manifest.Default.Revision), 0},
	}
	for i, r := range m.manifest.Remotes {
		items = append(items, entry{EntryRemote, fmt.Sprintf("remote: %s", r.Name), fmt.Sprintf("fetch: %s, revision: %s", r.Fetch, r.Revision), i})
	}
	for i, p := range m.manifest.Projects {
		items = append(items, entry{EntryProject, fmt.Sprintf("project: %s", p.Name), fmt.Sprintf("path: %s, remote: %s", p.Path, p.Remote), i})
	}
	m.list = list.New(items, list.NewDefaultDelegate(), 0, 0)
	m.list.Title = "Edit XML Entries"
}

func (m model) Init() tea.Cmd {
	return nil
}

func (m model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
	switch msg := msg.(type) {
	case tea.WindowSizeMsg:
		m.list.SetSize(msg.Width-4, msg.Height-6)
	case tea.KeyMsg:
		switch msg.String() {
		case "ctrl+c", "q":
			return m, tea.Quit
		case "tab":
			if m.editing {
				m.cursor = (m.cursor + 1) % len(m.inputs)
				for i := range m.inputs {
					if i == m.cursor {
						m.inputs[i].Focus()
					} else {
						m.inputs[i].Blur()
					}
				}
				return m, nil
			}
		case "shift+tab":
			if m.editing {
				m.cursor = (m.cursor - 1 + len(m.inputs)) % len(m.inputs)
				for i := range m.inputs {
					if i == m.cursor {
						m.inputs[i].Focus()
					} else {
						m.inputs[i].Blur()
					}
				}
				return m, nil
			}
		case "enter":
			if m.editing {
				newModel, cmd := m.saveEdit()
				return newModel, cmd
			}
			sel := m.list.SelectedItem().(entry)
			return m.initEdit(sel)
		}
	}

	if m.editing {
		for i := range m.inputs {
			m.inputs[i], _ = m.inputs[i].Update(msg)
		}
		return m, nil
	}

	var cmd tea.Cmd
	m.list, cmd = m.list.Update(msg)
	return m, cmd
}

func (m model) initEdit(sel entry) (tea.Model, tea.Cmd) {
	m.editing = true
	m.editIndex = sel.index
	m.editType = sel.typeOf
	m.inputs = nil
	m.labels = nil
	m.cursor = 0

	makeInput := func(val string) textinput.Model {
		ti := textinput.New()
		ti.SetValue(val)
		ti.CursorEnd()
		return ti
	}

	switch sel.typeOf {
	case EntryDefault:
		m.labels = []string{"sync-j", "revision"}
		m.inputs = []textinput.Model{makeInput(m.manifest.Default.SyncJ), makeInput(m.manifest.Default.Revision)}
	case EntryRemote:
		r := m.manifest.Remotes[sel.index]
		m.labels = []string{"fetch", "name", "revision", "upstream", "review"}
		m.inputs = []textinput.Model{makeInput(r.Fetch), makeInput(r.Name), makeInput(r.Revision), makeInput(r.Upstream), makeInput(r.Review)}
	case EntryProject:
		p := m.manifest.Projects[sel.index]
		m.labels = []string{"path", "name", "remote", "revision", "upstream", "groups"}
		m.inputs = []textinput.Model{makeInput(p.Path), makeInput(p.Name), makeInput(p.Remote), makeInput(p.Revision), makeInput(p.Upstream), makeInput(p.Groups)}
	}

	m.inputs[0].Focus()
	return m, nil
}

func (m model) saveEdit() (tea.Model, tea.Cmd) {
	vals := make(map[string]string)
	for i, lbl := range m.labels {
		vals[lbl] = m.inputs[i].Value()
	}
	switch m.editType {
	case EntryDefault:
		m.manifest.Default.SyncJ = vals["sync-j"]
		m.manifest.Default.Revision = vals["revision"]
	case EntryRemote:
		m.manifest.Remotes[m.editIndex] = Remote{
			Fetch:    vals["fetch"],
			Name:     vals["name"],
			Revision: vals["revision"],
			Upstream: vals["upstream"],
			Review:   vals["review"],
		}
	case EntryProject:
		m.manifest.Projects[m.editIndex] = Project{
			Path:     vals["path"],
			Name:     vals["name"],
			Remote:   vals["remote"],
			Revision: vals["revision"],
			Upstream: vals["upstream"],
			Groups:   vals["groups"],
		}
	}
	m.editing = false
	return m.writeToFile()
}

func (m model) writeToFile() (tea.Model, tea.Cmd) {
	out, err := xml.MarshalIndent(m.manifest, "", "  ")
	if err != nil {
		m.errorMsg = fmt.Sprintf("Failed to marshal XML: %v", err)
		return m, nil
	}
	out = []byte(xml.Header + string(out) + "\n")
	err = os.WriteFile("default.xml", out, 0644)
	if err != nil {
		m.errorMsg = fmt.Sprintf("Failed to write XML: %v", err)
	} else {
		m.errorMsg = "Saved successfully!"
		m.refreshList() // <-- refresh list with new data
	}
	return m, nil
}

func (m model) View() string {
	if m.editing {
		var b strings.Builder
		b.WriteString("[ Editing ] Tab to move, Enter to save\n")
		for i, input := range m.inputs {
			b.WriteString(fmt.Sprintf("%s: %s\n", m.labels[i], input.View()))
		}
		return docStyle.Render(b.String())
	}
	return docStyle.Render(m.list.View()) + "\n" + m.errorMsg + "\n(q to quit, enter to edit)"
}

func main() {
	data, err := os.ReadFile("default.xml")
	if err != nil {
		fmt.Println("Failed to read default.xml:", err)
		return
	}
	var manifest Manifest
	if err := xml.Unmarshal(data, &manifest); err != nil {
		fmt.Println("Failed to parse XML:", err)
		return
	}
	p := tea.NewProgram(newModel(manifest), tea.WithAltScreen())
	if _, err := p.Run(); err != nil {
		fmt.Println("Error running program:", err)
		os.Exit(1)
	}
}
